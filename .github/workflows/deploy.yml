name: Deploy

on:
  push:
    branches:
      - production

jobs:
  changes:
    name: "Check for docs changes"
    runs-on: ubuntu-latest
    outputs:
      developers-site: ${{ steps.filter.outputs.developers-site }}
      onedot: ${{ steps.filter.outputs.onedot }}
      access: ${{ steps.filter.outputs.access }}
      analytics: ${{ steps.filter.outputs.analytics }}
      api: ${{ steps.filter.outputs.api }}
      argo-tunnel: ${{ steps.filter.outputs.argo-tunnel }}
      automatic-platform-optimization: ${{ steps.filter.outputs.automatic-platform-optimization }}
      bots: ${{ steps.filter.outputs.bots }}
      byoip: ${{ steps.filter.outputs.byoip }}
      cloudflare-one: ${{ steps.filter.outputs.cloudflare-one }}
      distributed-web: ${{ steps.filter.outputs.distributed-web }}
      docs-engine: ${{ steps.filter.outputs.docs-engine }}
      events: ${{ steps.filter.outputs.events }}
      firewall: ${{ steps.filter.outputs.firewall }}
      fundamentals: ${{ steps.filter.outputs.fundamentals }}
      gateway: ${{ steps.filter.outputs.gateway }}
      browser-isolation: ${{ steps.filter.outputs.browser-isolation }}
      http3: ${{ steps.filter.outputs.http3 }}
      images: ${{ steps.filter.outputs.images }}
      load-balancing: ${{ steps.filter.outputs.load-balancing }}
      logs: ${{ steps.filter.outputs.logs }}
      magic-transit: ${{ steps.filter.outputs.magic-transit }}
      network-interconnect: ${{ steps.filter.outputs.network-interconnect }}
      pages: ${{ steps.filter.outputs.pages }}
      page-shield: ${{ steps.filter.outputs.page-shield }}
      randomness-beacon: ${{ steps.filter.outputs.randomness-beacon }}
      registrar: ${{ steps.filter.outputs.registrar }}
      rules: ${{ steps.filter.outputs.rules }}
      spectrum: ${{ steps.filter.outputs.spectrum }}
      ssl: ${{ steps.filter.outputs.ssl }}
      stream: ${{ steps.filter.outputs.stream }}
      tenant: ${{ steps.filter.outputs.tenant }}
      terraform: ${{ steps.filter.outputs.terraform }}
      time-services: ${{ steps.filter.outputs.time-services }}
      warp-client: ${{ steps.filter.outputs.warp-client }}
      waf: ${{ steps.filter.outputs.waf }}
      waiting-room: ${{ steps.filter.outputs.waiting-room }}
      workers: ${{ steps.filter.outputs.workers }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2.4.2
        id: filter
        with:
          filters: |
            developers-site:
              - 'developers.cloudflare.com/**'
            onedot:
              - 'products/1.1.1.1/**'
            access:
              - 'products/access/**'
            analytics:
              - 'products/analytics/**'
            api:
              - 'products/api/**'
            argo-tunnel:
              - 'products/argo-tunnel/**'
            automatic-platform-optimization:
              - 'products/automatic-platform-optimization/**'
            bots:
              - 'products/bots/**'
            byoip:
              - 'products/byoip/**'
            cloudflare-one:
              - 'products/cloudflare-one/**'
            distributed-web:
              - 'products/distributed-web/**'
            docs-engine:
              - 'products/docs-engine/**'
            events:
              - 'products/events/**'
            firewall:
              - 'products/firewall/**'
            fundamentals:
              - 'products/fundamentals/**'
            gateway:
              - 'products/gateway/**'
            browser-isolation:
              - 'products/browser-isolation/**'
            http3:
              - 'products/http3/**'
            images:
              - 'products/images/**'
            load-balancing:
              - 'products/load-balancing/**'
            logs:
              - 'products/logs/**'
            magic-transit:
              - 'products/magic-transit/**'
            network-interconnect:
              - 'products/network-interconnect/**'
            pages:
              - 'products/pages/**'
            page-shield:
            - 'products/page-shield/**'
            randomness-beacon:
              - 'products/randomness-beacon/**'
            registrar:
              - 'products/registrar/**'
            rules:
              - 'products/rules/**'
            spectrum:
              - 'products/spectrum/**'
            ssl:
              - 'products/ssl/**'
            stream:
              - 'products/stream/**'
            tenant:
              - 'products/tenant/**'
            terraform:
              - 'products/terraform/**'
            time-services:
              - 'products/time-services/**'
            waf:
              - 'products/waf/**'
            waiting-room:
              - 'products/waiting-room/**'
            warp-client:
              - 'products/warp-client/**'
            workers:
              - 'products/workers/**'

  deploy-developers-site:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.developers-site == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: "developers.cloudflare.com"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "developers.cloudflare.com"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "developers.cloudflare.com"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-1-1-1-1:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.onedot == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/1.1.1.1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/1.1.1.1"
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/1.1.1.1"
          environment: "production"

  deploy-access:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.access == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/access
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/access"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/access"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-analytics:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.analytics == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/analytics
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/analytics"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/analytics"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-api:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/api
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/api"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/api"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-argo-tunnel:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.argo-tunnel == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/argo-tunnel
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/argo-tunnel"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/argo-tunnel"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-automatic-platform-optimization:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.automatic-platform-optimization == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/automatic-platform-optimization
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/automatic-platform-optimization"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/automatic-platform-optimization"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-bots:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.bots == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/bots
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/bots"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/bots"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-byoip:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.byoip == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/byoip
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/byoip"
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/byoip"
          environment: "production"

  deploy-cloudflare-one:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.cloudflare-one == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/cloudflare-one
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/cloudflare-one"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/cloudflare-one"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-distributed-web:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.distributed-web == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/distributed-web
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/distributed-web"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/distributed-web"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-docs-engine:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.docs-engine == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/docs-engine
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/docs-engine"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/docs-engine"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-events:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.events == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/events
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/events"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/events"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-firewall:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.firewall == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/firewall
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/firewall"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/firewall"
          environment: "production"
          wranglerVersion: '1.13.0'
  
  deploy-fundamentals:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.fundamentals == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/fundamentals
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/fundamentals"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/fundamentals"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-gateway:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.gateway == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/gateway
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/gateway"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/gateway"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-browser-isolation:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.browser-isolation == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/browser-isolation
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/browser-isolation"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/browser-isolation"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-http3:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.http3 == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/http3
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/http3"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/http3"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-images:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.images == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/images
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/images"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/images"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-load-balancing:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.load-balancing == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/load-balancing
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/load-balancing"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/load-balancing"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-logs:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.logs == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/logs
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/logs"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/logs"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-magic-transit:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.magic-transit == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/magic-transit
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/magic-transit"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/magic-transit"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-network-interconnect:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.network-interconnect == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/network-interconnect
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/network-interconnect"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/network-interconnect"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-pages:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.pages == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/pages
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: 'products/pages'
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: 'products/pages'
          environment: 'production'
          wranglerVersion: '1.13.0'
  
  deploy-page-shield:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.page-shield == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/page-shield
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: 'products/page-shield'
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: 'products/page-shield'
          environment: 'production'
          wranglerVersion: '1.13.0'

  deploy-randomness-beacon:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.randomness-beacon == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/randomness-beacon
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/randomness-beacon"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/randomness-beacon"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-registrar:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.registrar == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/registrar
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/registrar"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/registrar"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-rules:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rules == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/rules
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/rules"
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/rules"
          environment: "production"

  deploy-spectrum:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.spectrum == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/spectrum
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/spectrum"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/spectrum"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-ssl:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.ssl == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/ssl
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/ssl"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/ssl"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-stream:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.stream == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/stream
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/stream"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/stream"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-tenant:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.tenant == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/tenant
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/tenant"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/tenant"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-terraform:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.terraform == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/terraform
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/terraform"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/terraform"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-time-services:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.time-services == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/time-services
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/time-services"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/time-services"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-waf:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.waf == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/waf
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/waf"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/waf"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-waiting-room:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.waiting-room == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/waiting-room
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/waiting-room"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/waiting-room"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-warp-client:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.warp-client == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/warp-client
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/warp-client"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/warp-client"
          environment: "production"
          wranglerVersion: '1.13.0'

  deploy-workers:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.workers == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: products/workers
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.2.0
      - run: |
          npm install
          mkdir .docs
          npm run ghactionsbootstrap
          npm run build
        env:
          WORKERS_ENV: development
      - name: Publish staging
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/workers"
          wranglerVersion: '1.13.0'
      - name: Publish production
        uses: cloudflare/wrangler-action@1.2.0
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          workingDirectory: "products/workers"
          environment: "production"
          wranglerVersion: '1.13.0'
