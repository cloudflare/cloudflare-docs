---
import { Card } from "~/components";

const configuration = Object.entries({
	available_ports_per_host: {
		title: "Available ports per host",
		default: 50000,
	},
	cloudflared_replicas: {
		title: "Number of cloudflared replicas",
		default: 2,
	},
	dns_udp_timeout_in_sec: {
		title: "DNS UDP session timeout (in seconds)",
		default: 5,
		readonly: true,
	},
	avg_non_dns_udp_session_timeout: {
		title: "Average non-DNS UDP session timeout (seconds)",
		default: 60,
		readonly: true,
	},
});

const metrics = Object.entries({
	tcp_per_sec: {
		title: "TCP requests per second",
		default: 50000,
	},
	non_dns_udp_req_per_sec: {
		title: "Non-DNS UDP requests per second",
		default: 0,
	},
	private_dns_req_per_sec: {
		title: "Private DNS requests per second",
		default: 0,
	},
});
---

<Card title="System configuration">
	{
		configuration.map(([key, value]) => (
			<div>
				<label for={key}>{value.title}</label>
				<br />
				<input
					type="number"
					id={key}
					name={key}
					value={value.default}
					readonly={value.readonly}
					data-tunnel-calculator
				/>
			</div>
		))
	}
</Card>

<Card title="Metrics">
	{
		metrics.map(([key, value]) => (
			<div>
				<label for={key}>{value.title}</label>
				<br />
				<input
					type="number"
					id={key}
					name={key}
					value={value.default}
					data-tunnel-calculator
				/>
			</div>
		))
	}
</Card>

<Card title="Result">
	<div>
		<label for="percent_capacity_per_replica"
			>Percent capacity per replica</label
		>
		<br />
		<input
			type="number"
			id="percent_capacity_per_replica"
			name="percent_capacity_per_replica"
			value="100"
			readonly
		/>
	</div>
	<div>
		<label for="percent_capacity_across_all_replicas"
			>Percent capacity across all replicas</label
		>
		<br />
		<input
			type="number"
			id="percent_capacity_across_all_replicas"
			name="percent_capacity_across_all_replicas"
			value="50"
			readonly
		/>
	</div>
	<div>
		<label for="max_dns_request_per_min"
			>Maximum DNS requests per minute across all replicas</label
		>
		<br />
		<input
			type="number"
			id="max_dns_request_per_min"
			name="max_dns_request_per_min"
			value="1200000"
			readonly
		/>
	</div>
</Card>
<sup>
	This calculator is for informational purposes only and all results are
	estimates.
</sup>

<script>
	import { evaluate, round } from "mathjs";

	function calculate() {
		const non_dns_udp_req_per_sec = document.querySelector<HTMLInputElement>(
			"#non_dns_udp_req_per_sec",
		)?.value;
		const avg_non_dns_udp_session_timeout =
			document.querySelector<HTMLInputElement>(
				"#avg_non_dns_udp_session_timeout",
			)?.value;
		const private_dns_req_per_sec = document.querySelector<HTMLInputElement>(
			"#private_dns_req_per_sec",
		)?.value;
		const dns_udp_timeout_in_sec = document.querySelector<HTMLInputElement>(
			"#dns_udp_timeout_in_sec",
		)?.value;
		const tcp_per_sec =
			document.querySelector<HTMLInputElement>("#tcp_per_sec")?.value;
		const available_ports_per_host = document.querySelector<HTMLInputElement>(
			"#available_ports_per_host",
		)?.value;
		const cloudflared_replicas = document.querySelector<HTMLInputElement>(
			"#cloudflared_replicas",
		)?.value;

		// const percent_capacity_per_replica = (((non_dns_udp_req_per_sec * avg_non_dns_udp_session_timeout) + (private_dns_req_per_sec * dns_udp_timeout_in_sec) + tcp_per_sec) / available_ports_per_host) * 100;
		const percent_capacity_per_replica = evaluate(
			`(((${non_dns_udp_req_per_sec} * ${avg_non_dns_udp_session_timeout}) + (${private_dns_req_per_sec} * ${dns_udp_timeout_in_sec}) + ${tcp_per_sec}) / ${available_ports_per_host}) * 100`,
		);
		const percent_capacity_across_all_replicas = evaluate(
			`((${non_dns_udp_req_per_sec} * ${avg_non_dns_udp_session_timeout} +
				${private_dns_req_per_sec} * ${dns_udp_timeout_in_sec} +
				${tcp_per_sec}) /
				(${available_ports_per_host} * ${cloudflared_replicas})) *
			100`,
		);
		const max_dns_request_per_min = evaluate(
			`((${available_ports_per_host} * ${cloudflared_replicas}) /
				${dns_udp_timeout_in_sec}) *
			60`,
		);

		const perceptCapacityPerReplicaInput =
			document.querySelector<HTMLInputElement>("#percent_capacity_per_replica");
		if (perceptCapacityPerReplicaInput) {
			perceptCapacityPerReplicaInput.value = round(
				percent_capacity_per_replica,
				2,
			);
		}

		const percentCapacityAcrossAllReplicasInput =
			document.querySelector<HTMLInputElement>(
				"#percent_capacity_across_all_replicas",
			);
		if (percentCapacityAcrossAllReplicasInput) {
			percentCapacityAcrossAllReplicasInput.value = round(
				percent_capacity_across_all_replicas,
				2,
			);
		}

		const maxDnsRequestPerMinInput = document.querySelector<HTMLInputElement>(
			"#max_dns_request_per_min",
		);
		if (maxDnsRequestPerMinInput) {
			maxDnsRequestPerMinInput.value = round(max_dns_request_per_min, 2);
		}
	}

	document
		.querySelectorAll("input[data-tunnel-calculator]")
		.forEach((input) => input.addEventListener("change", calculate));
</script>
