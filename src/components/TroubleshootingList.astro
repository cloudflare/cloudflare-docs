---
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";

const currentSection = Astro.params.slug?.split("/")[0];
const troubleshootingTypes = ["troubleshooting", "faq"];

const resources = await getCollection("docs", (entry) => {
	return (
		troubleshootingTypes.includes(entry.data.pcx_content_type) &&
		entry.slug.startsWith(`${currentSection}/`)
	);
});
---

<table>
	<thead>
		<tr>
			<td>Resource</td>
			<td>Location</td>
			<td>Type</td>
		</tr>
	</thead>
	<tbody>
		{
			resources.map(async (resource) => {
				const segments = resource.slug.split("/").slice(1, -1);
				const location = [];

				for (let i = 0; i < segments.length; i++) {
					let path;

					if (i === 0) {
						path = `${currentSection}/${segments[i]}`;
					} else {
						path = currentSection + "/" + segments.slice(0, i).join("/");
					}

					const entry = await getEntry("docs", path);

					if (!entry) {
						throw new Error(
							`[TroubleshootingList] Failed to find entry for ${path}.`,
						);
					}

					const title = entry.data.title;

					location.push(title);
				}

				const title =
					resource.data.head.find((x) => x.tag === "title")?.content ??
					resource.data.title;

				return (
					<tr>
						<td>
							<a href={`/${resource.slug}/`}>{title}</a>
						</td>
						<td>{location.join(" > ")}</td>
						<td>
							{resource.data.pcx_content_type === "troubleshooting"
								? "Troubleshooting"
								: "FAQ"}
						</td>
					</tr>
				);
			})
		}
	</tbody>
</table>
