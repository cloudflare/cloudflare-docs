---
import { getEntry } from "astro:content";
import { getCollection, z } from "astro:content";

type Props = z.infer<typeof props>;

const props = z.object({
	type: z.enum(["apps", "videos"]),
	tags: z.string().array().optional(),
	products: z.string().array().optional(),
	cloudflare: z.boolean().default(true),
});

const { type, tags, products, cloudflare } = props.parse(Astro.props);

const resources = await getEntry(type, "index");

const filtered = resources.data.entries.filter((entry) => {
	return (
		(cloudflare ? cloudflare : false) &&
		(tags ? entry.tags?.some((v: string) => tags.includes(v)) : true) &&
		(products
			? entry.products?.some((v: string) => products.includes(v))
			: true)
	);
});

filtered.sort((a, b) => b.updated - a.updated);
---

<ul>
	{
		filtered.map((entry) => {
			const title = entry.name ?? entry.title;
			return (
				<li>
					<>
						<a href={entry.link}>{title}</a>
						<span>: {entry.description}</span>
					</>
				</li>
			);
		})
	}
</ul>
