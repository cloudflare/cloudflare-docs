---
import type { Props } from "@astrojs/starlight/props";
import Default from "@astrojs/starlight/components/PageTitle.astro";
import { marked } from "marked";

import { Breadcrumbs } from "astro-breadcrumbs";
import "astro-breadcrumbs/breadcrumbs.css";

import { Badge } from "@astrojs/starlight/components";

import Description from "~/components/Description.astro";
import SpotlightAuthorDetails from "~/components/SpotlightAuthorDetails.astro";
import LastReviewed from "~/components/LastReviewed.astro";

import { getEntry } from "astro:content";

const spotlightDetails = Astro.props.entry.data.spotlight;
const updated = Astro.props.entry.data.updated;
const badge = Astro.props.entry.data.sidebar?.badge;
const summary = Astro.props.entry.data.summary;

const slug = Astro.props.entry.slug;

const showBreadcrumbs = !["products"].includes(slug);

const breadcrumbProps: Record<string, any> = {
	crumbs: [
		{
			text: "Products",
			href: "/products/",
		},
	],
	truncated: true,
	id: "breadcrumbs",
};

const segments = slug.split("/");

for (let i = 0; i < segments.length; i++) {
	if (i === 0) {
		const entry = await getEntry("products", segments[0]);

		let title = segments[0];
		if (entry) {
			title = entry.data.product.title;
		}

		breadcrumbProps.crumbs.push({
			text: title,
			href: `/${segments[0]}/`,
		});

		continue;
	}

	let path = segments.slice(0, i + 1).join("/");

	const entry = await getEntry("docs", path);

	let title = segments[i];
	if (entry) {
		title = entry.data.title;
	} else if (i + 1 === segments.length) {
		title = Astro.props.entry.data.title;
	}

	breadcrumbProps.crumbs.push({
		text: title,
		href: `/${path}/`,
	});
}

// Currently the officially sanctioned way to alter behaviour on specific routes
// https://starlight.astro.build/guides/overriding-components/#only-override-on-specific-pages
const hideTitle = Astro.props.hideTitle;
---

{
	showBreadcrumbs && (
		<Breadcrumbs {...breadcrumbProps}>
			<svg
				slot="separator"
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
			>
				<polyline points="9 18 15 12 9 6" />
			</svg>
		</Breadcrumbs>
	)
}

{!hideTitle && <Default {...Astro.props} />}

{badge && <Badge variant={badge.variant} text={badge.text} />}

{updated && <LastReviewed date={updated} />}

{
	spotlightDetails && (
		<SpotlightAuthorDetails
			author={spotlightDetails.author}
			platform={spotlightDetails.author_bio_source}
			link={spotlightDetails.author_bio_link}
		/>
	)
}

{summary && <Description set:html={marked.parse(summary)} />}

<style>
	:root {
		--color-link-breadcrumbs: var(--sl-color-text-accent);
	}
</style>
