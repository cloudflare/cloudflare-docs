---
import { z } from "astro:schema";
import { getEntry } from "astro:content";
import { marked } from "marked";
import Details from "~/components/Details.astro";
import { LinkButton, Steps } from "@astrojs/starlight/components";
import { getCollection } from "astro:content";
import { sortBySidebarOrder } from "~/util/sidebar";

type Props = z.infer<typeof props>;

const props = z
	.object({
		file: z.string(),
	})
	.strict();

const { file } = props.parse(Astro.props);

const entry = await getEntry("learning-paths", file);

if (!entry)
	throw new Error(`[LearningPath] Unable to find learning path for ${file}.`);

const learningPath = entry.data;

const modules = await getCollection("docs", (page) => {
	return (
		page.slug.startsWith(learningPath.path.slice(1)) &&
		page.id.endsWith("index.mdx")
	);
});

const sorted = modules.sort(sortBySidebarOrder);

const firstModule = sorted.at(0);

if (!firstModule)
	throw new Error(
		`[LearningPath] Unable to get first module for ${learningPath.path}.`,
	);
---

<p set:html={marked.parse(learningPath.description)} />

<LinkButton href={"/" + firstModule.slug + "/"}>Start path</LinkButton>
<br />
<Steps>
	<ol>
		{
			sorted.map(async (module) => {
				let units = await getCollection("docs", (page) => {
					return (
						page.slug.startsWith(module.slug) && !page.id.endsWith("index.mdx")
					);
				});

				units = units.sort(sortBySidebarOrder);

				return (
					<li>
						<h2>{module.data.title}</h2>
						{module.data.description && <p>{module.data.description}</p>}
						<LinkButton href={"/" + module.slug + "/"} variant="secondary">
							Start module
						</LinkButton>
						<Details header={`Contains ${units.length} units`} open>
							<Steps>
								<ol>
									{units.map((unit) => (
										<li>
											<a href={"/" + unit.slug + "/"}>{unit.data.title}</a>
										</li>
									))}
								</ol>
							</Steps>
						</Details>
					</li>
				);
			})
		}
	</ol>
</Steps>
