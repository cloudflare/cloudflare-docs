---
import type { ComponentProps } from "astro/types";
import { getCollection } from "astro:content";
import { slug } from "github-slugger";

import AnchorHeading from "~/components/AnchorHeading.astro";
import InlineBadge from "~/components/InlineBadge.astro";

const models = await getCollection("workers-ai-models");
const mapped = models.map((x) => x.data);
const grouped = Object.groupBy(mapped, (entry) => entry.task_type);
const entries = Object.entries(grouped).reverse();

type InlineBadgeProps = ComponentProps<typeof InlineBadge>;
---

{
	entries.map(([_, models]) => (
		<>
			<AnchorHeading
				depth={2}
				title={models?.at(0)?.model?.task?.name ?? "Unknown"}
			/>

			<p>{models?.at(0)?.model?.task?.description ?? "Unknown"}</p>

			<table>
				<thead>
					<tr>
						<th>Model</th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					{models?.map((model) => {
						const badges = model.model.properties
							.flatMap(({ property_id, value }): InlineBadgeProps | null => {
								if (property_id === "beta" && value === "true") {
									return {
										preset: "beta",
										text: "Beta",
									} as const;
								}

								if (property_id === "lora" && value === "true") {
									return {
										variant: "tip",
										text: "LoRA",
									} as const;
								}

								if (property_id === "function_calling" && value === "true") {
									return {
										variant: "note",
										text: "Function calling",
									} as const;
								}

								if (property_id === "planned_deprecation_date") {
									const timestamp = Math.floor(
										new Date(value).getTime() / 1000,
									);

									if (Date.now() > timestamp) {
										return { variant: "danger", text: "Deprecated" };
									}

									return { variant: "danger", text: "Planned deprecation" };
								}

								return null;
							})
							.filter(Boolean) as InlineBadgeProps[];

						return (
							<tr>
								<td>
									<a href={`/workers-ai/models/${model.model_display_name}`}>
										{model.model_display_name}
									</a>
									<br />
									{badges.map((badge) => (
										<InlineBadge {...badge} />
									))}
								</td>
								<td>{model.model.description}</td>
							</tr>
						);
					})}
				</tbody>
			</table>
		</>
	))
}
