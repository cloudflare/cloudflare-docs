---
import { z } from "astro:schema";
import { indexPlans } from "~/util/plans";
import { marked } from "marked";
import GlossaryTooltip from "~/components/GlossaryTooltip.astro";

type Props = z.infer<typeof props>;

const props = z
	.object({
		id: z.string(),
	})
	.strict();

const { id } = props.parse(Astro.props);

// TODO: improve product features types
const plan = (await indexPlans(id)) as any;

// @ts-ignore types not implemented for plans JSON
const properties = plan.properties;

const markdown = (content: any) => {
	if (typeof content !== "string") return content;

	return marked.parse(content);
};
---

<table>
	<thead>
		<tr>
			<th></th>
			<th>Free</th>
			<th>Pro</th>
			<th>Business</th>
			<th>Enterprise</th>
			{plan.ent_plus && <th>{plan.ent_plus}</th>}
		</tr>
	</thead>
	<tbody>
		{
			Object.entries(properties).map(([k, v]: [string, any]) => {
				const renderTitle = (title: string) => {
					const placeholder = "[[GLOSSARY_TOOLTIP_SNIPPETS_SUBREQUEST]]";

					if (title.includes(placeholder)) {
						const [beforePlaceholder, afterPlaceholder] =
							title.split(placeholder);

						return (
							<>
								{beforePlaceholder}
								<GlossaryTooltip
									term="Snippets subrequest"
									prepend="A subrequest is "
								>
									subrequests
								</GlossaryTooltip>
								{afterPlaceholder}
							</>
						);
					}

					return markdown(title);
				};

				return (
					<tr>
						<th set:html={renderTitle(v.title)} />
						<td set:html={markdown(v.free)} />
						<td set:html={markdown(v.pro)} />
						<td set:html={markdown(v.biz)} />
						<td set:html={markdown(v.ent)} />
						{plan.ent_plus && <td set:html={markdown(v.ent_plus)} />}
					</tr>
				);
			})
		}
	</tbody>
</table>
