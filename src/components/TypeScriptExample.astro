---
import { z } from "astro:content";
import { transform } from "detype";
import { parse } from "node-html-parser";
import { Code, Tabs, TabItem } from "@astrojs/starlight/components";

type Props = z.infer<typeof props>;

const props = z
	.object({
		filename: z.string().optional(),
		tabsWrapper: z.boolean().default(true),
		playground: z.boolean().default(false),
	})
	.or(
		z.object({
			filename: z.object({
				js: z.string(),
				ts: z.string(),
			}),
			tabsWrapper: z.boolean().default(true),
			playground: z.boolean().default(false),
		}),
	);

const { filename, tabsWrapper, playground } = props.parse(Astro.props);

let jsTitle, tsTitle;

if (filename) {
	if (typeof filename === "object") {
		jsTitle = filename.js;
		tsTitle = filename.ts;
	} else {
		jsTitle = filename.replace(".ts", ".js");
		tsTitle = filename;
	}
}
const slot = await Astro.slots.render("default");

const html = parse(slot);

const copy = html.querySelector("div.copy > button");

if (!copy) {
	throw new Error(
		`[TypeScriptExample] Unable to find copy button in rendered code block HTML.`,
	);
}

let code = copy.attributes["data-code"];

if (!code) {
	throw new Error(
		`[TypeScriptExample] Unable to find data-code attribute on copy button.`,
	);
}

code = code.replace(/\u007f/g, "\n");

const js = await transform(code, "placeholder.ts");

const TabsWrapper = tabsWrapper ? Tabs : Fragment;
---

<TabsWrapper syncKey="workersExamples">
	<TabItem label="JavaScript" icon="seti:javascript">
		<Code
			lang="js"
			code={js}
			title={jsTitle}
			meta={playground ? "playground" : undefined}
		/>
	</TabItem>
	<TabItem label="TypeScript" icon="seti:typescript">
		<Code lang="ts" code={code} title={tsTitle} />
	</TabItem>
</TabsWrapper>
