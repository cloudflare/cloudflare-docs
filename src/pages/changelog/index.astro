---
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { Badge } from "~/components";
import { marked } from "marked";
import { getChangelogs } from "~/util/changelogs";

const { products, productAreas, changelogs } = await getChangelogs();
---

<StarlightPage frontmatter={{ title: "Changelogs", template: "splash" }}>
	<Badge text="Beta" variant="caution" size="medium" />
	<br/>
	<br/>
	<p id="productDescription">Subscribe to all Changelog posts via <a href="/changelog/index.xml">RSS</a>.</p>
    <p id="productAreaDescription" style="display:none">Subscribe to all Changelog posts via <a class="rssLink" href="/changelog/index.xml">RSS</a>.</p>
    <p>Unless otherwise noted, all dates refer to the release date of the change.</p>
	<br/>
	<label for="products">Product:</label>
	<select name="products" id="products">
		<option value="all">Select...</option>
		{products.map((product) => <option value={product.toLowerCase()}>{product}</option>)}
	</select>
	<label for="productAreas">Product area:</label>
	<select name="productAreas" id="productAreas">
		<option value="all">Select...</option>
		{productAreas.map((productAreas) => <option value={productAreas.toLowerCase()}>{productAreas}</option>)}
	</select>
	{
		changelogs.map(([date, entries]) => (
			<div data-date={date}>
				<h2>{date}</h2>
				{entries?.map((entry) => (
					<div data-product={entry.product.toLowerCase()} data-productArea={entry.productAreaName.toLowerCase()}>
						<h3>
							<a href={entry.link}>{entry.product}</a>
						</h3>
						{["WAF", "DDoS protection"].includes(entry.product) ? (
							<p set:html={marked.parse((entry.scheduled ? "**" + "Scheduled changes for " + (entry.date ?? "") + "**" : "**" + (entry.date ?? "") + "**"))}></p>
						) : (
							<p set:html={marked.parse("**" + (entry.title ?? "") + "**")} />
						)}
						{["WAF", "DDoS protection"].includes(entry.product) ? (<p set:html={marked.parse("For more details, refer to the [changelog page](" + entry.link + ").")}></p>
) : (
						<p set:html={marked.parse(entry.description ?? "")} />)}
					</div>
				))}
			</div>
		))
	}
</StarlightPage>

<script>
	const productFilter = document.querySelector<HTMLSelectElement>("#products");
	productFilter?.addEventListener("change", filterEntries);

	const productAreaFilter = document.querySelector<HTMLSelectElement>("#productAreas");
	productAreaFilter?.addEventListener("change", filterEntries);

	function filterEntries() {
		const dates = document.querySelectorAll<HTMLElement>("[data-date]");

		for (const date of dates) {
			const entries = date.querySelectorAll<HTMLElement>("[data-product]");

			if (productAreaFilter.value === "all" && productFilter.value === "all") {
				dates.forEach((x) => {
					x.style.display = "";
				});
				entries.forEach((x) => {
					x.style.display = "";
				});
				continue;
			}

			let entriesHidden = 0;

			for (const entry of entries) {
				const product = entry.dataset.product;
				const productArea = entry.dataset.productarea

				if ((productFilter?.value === product || productFilter?.value === "all") && (productAreaFilter?.value === productArea || productAreaFilter?.value === "all") ) {
					entry.style.display = "";
					date.style.display = "";
				} else {
					entry.style.display = "none";
					entriesHidden++;
					
				}
			}

			if (entriesHidden >= entries.length) {
				date.style.display = "none";
			}
		}
	}
</script>
