---
import type { GetStaticPaths } from "astro";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { getCollection } from "astro:content";
import { InlineBadge } from "~/components";
import Schemas from "~/components/models/Schemas.astro";
import Playground from "~/components/models/Playground.astro";
import TextGenerationResponses from "~/components/models/responses/TextGenerationResponses.astro";
import TextGenerationCode from "~/components/models/code/TextGenerationCode.astro";
import TextGenerationPrompting from "~/components/models/prompting/TextGenerationPrompting.astro";
import AutomaticSpeechRecognitionResponses from "~/components/models/responses/AutomaticSpeechRecognitionResponses.astro";
import AutomaticSpeechRecognitionCode from "~/components/models/code/AutomaticSpeechRecognitionCode.astro";
import ImageClassificationResponses from "~/components/models/responses/ImageClassificationResponses.astro";
import ImageClassificationCode from "~/components/models/code/ImageClassificationCode.astro";
import ImageToTextResponses from "~/components/models/responses/ImageToTextResponses.astro";
import ImageToTextCode from "~/components/models/code/ImageToTextCode.astro";
import ObjectDetectionResponses from "~/components/models/responses/ObjectDetectionResponses.astro";
import ObjectDetectionCode from "~/components/models/code/ObjectDetectionCode.astro";
import SummarizationResponses from "~/components/models/responses/SummarizationResponses.astro";
import SummarizationCode from "~/components/models/code/SummarizationCode.astro";
import TextClassificationResponses from "~/components/models/responses/TextClassificationResponses.astro";
import TextClassificationCode from "~/components/models/code/TextClassificationCode.astro";
import TextEmbeddingsResponses from "~/components/models/responses/TextEmbeddingsResponses.astro";
import TextEmbeddingCode from "~/components/models/code/TextEmbeddingCode.astro";
import TextToImageResponses from "~/components/models/responses/TextToImageResponses.astro";
import TextToImageCode from "~/components/models/code/TextToImageCode.astro";
import TranslationResponses from "~/components/models/responses/TranslationResponses.astro";
import TranslationCode from "~/components/models/code/TranslationCode.astro";
import StableDiffusionV15Img2ImgCode from "~/components/models/code/StableDiffusion-v1-5-img2imgCode.astro";
import StableDiffusionV15InpaintingCode from "~/components/models/code/StableDiffusion-v1-5-inpaintingCode.astro";

export const getStaticPaths = (async () => {
	const models = await getCollection("workers-ai-models");

	return models.map((entry) => {
		return {
			params: {
				name: entry.id,
			},
			props: { data: entry.data },
		};
	});
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { data } = Astro.props;

const description = data.model.description;
const terms = data.model.properties.find((x) => x.property_id === "terms");
const showPlayground = data.model.task.name === "Text Generation";
const hasLora = Boolean(
	data.model.properties.find((x) => x.property_id === "lora"),
);

const badges = data.model.properties.flatMap(({ property_id, value }) => {
	if (property_id === "beta" && value === "true") {
		return {
			preset: "beta",
		};
	}

	if (property_id === "lora" && value === "true") {
		return {
			variant: "tip",
			text: "LoRA",
		};
	}

	if (property_id === "function_calling" && value === "true") {
		return {
			variant: "note",
			text: "Function calling",
		};
	}

	if (property_id === "planned_deprecation_date") {
		const timestamp = Math.floor(new Date(value).getTime() / 1000);

		if (Date.now() > timestamp) {
			return { variant: "danger", text: "Deprecated" };
		}

		return { variant: "danger", text: "Planned deprecation" };
	}

	return [];
});

let CodeExamples;
let Responses;

switch (data.task_type) {
	case "text-generation": {
		CodeExamples = TextGenerationCode;
		Responses = TextGenerationResponses;
	}
	break;
	case "automatic-speech-recognition": {
		CodeExamples = AutomaticSpeechRecognitionCode;
		Responses = AutomaticSpeechRecognitionResponses;
	}
	break;
	case "image-classification": {
		CodeExamples = ImageClassificationCode;
		Responses = ImageClassificationResponses;
	}
	break;
	case "image-to-text": {
		CodeExamples = ImageToTextCode;
		Responses = ImageToTextResponses;
	}
	break;
	case "object-detection": {
		CodeExamples = ObjectDetectionCode;
		Responses = ObjectDetectionResponses;
	}
	break;
	case "summarization": {
		CodeExamples = SummarizationCode;
		Responses = SummarizationResponses;
	}
	break;
	case "text-classification": {
		CodeExamples = TextClassificationCode;
		Responses = TextClassificationResponses;
	}
	break;
	case "text-embeddings": {
		CodeExamples = TextEmbeddingCode;
		Responses = TextEmbeddingsResponses;
	}
	break;
	case "text-to-image": {
		CodeExamples = TextToImageCode;
		Responses = TextToImageResponses;
	}
	break;
	case "translation": {
		CodeExamples = TranslationCode;
		Responses = TranslationResponses;
	}
	break;
}

if (data.model.name === "@cf/runwayml/stable-diffusion-v1-5-inpainting") {
	CodeExamples = StableDiffusionV15InpaintingCode;
} else if (data.model.name === "@cf/runwayml/stable-diffusion-v1-5-img2img") {
	CodeExamples = StableDiffusionV15Img2ImgCode;
}

---

<StarlightPage frontmatter={{ title: name, description }}>
	{badges.map((badge) => <InlineBadge {...badge} /> )}
	<p>
		<strong>Model ID: </strong>
		<code>{data.model.name}</code>
	</p>
	<p>{description}</p>
	{
		terms && (
			<p>
				<a href={terms.value}>Terms & License</a>
			</p>
		)
	}
	<h2>Properties</h2>
	<p>
		<strong>Task Type: </strong>
		<a href={`/workers-ai/models/#${data.task_type}`}>{data.model.task.name}</a>
	</p>
	{showPlayground && <Playground name={data.model.name} />}
	<CodeExamples name={data.model.name} lora={hasLora} />
	{
		data.task_type === "text-generation" && (
			<TextGenerationPrompting lora={hasLora} />
		)
	}
	<Responses name={data.model.name} />
	<Schemas schemas={data.json_schema} />
</StarlightPage>